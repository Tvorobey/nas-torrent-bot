// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// SenderMock is a mock implementation of fs_watcher.Sender.
//
//	func TestSomethingThatUsesSender(t *testing.T) {
//
//		// make and configure a mocked fs_watcher.Sender
//		mockedSender := &SenderMock{
//			SendMessageToAllFunc: func(message string)  {
//				panic("mock out the SendMessageToAll method")
//			},
//		}
//
//		// use mockedSender in code that requires fs_watcher.Sender
//		// and then make assertions.
//
//	}
type SenderMock struct {
	// SendMessageToAllFunc mocks the SendMessageToAll method.
	SendMessageToAllFunc func(message string)

	// calls tracks calls to the methods.
	calls struct {
		// SendMessageToAll holds details about calls to the SendMessageToAll method.
		SendMessageToAll []struct {
			// Message is the message argument value.
			Message string
		}
	}
	lockSendMessageToAll sync.RWMutex
}

// SendMessageToAll calls SendMessageToAllFunc.
func (mock *SenderMock) SendMessageToAll(message string) {
	if mock.SendMessageToAllFunc == nil {
		panic("SenderMock.SendMessageToAllFunc: method is nil but Sender.SendMessageToAll was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	mock.lockSendMessageToAll.Lock()
	mock.calls.SendMessageToAll = append(mock.calls.SendMessageToAll, callInfo)
	mock.lockSendMessageToAll.Unlock()
	mock.SendMessageToAllFunc(message)
}

// SendMessageToAllCalls gets all the calls that were made to SendMessageToAll.
// Check the length with:
//
//	len(mockedSender.SendMessageToAllCalls())
func (mock *SenderMock) SendMessageToAllCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	mock.lockSendMessageToAll.RLock()
	calls = mock.calls.SendMessageToAll
	mock.lockSendMessageToAll.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// StorageMock is a mock implementation of send_message.Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked send_message.Storage
//		mockedStorage := &StorageMock{
//			GetAllChatsFunc: func() []int64 {
//				panic("mock out the GetAllChats method")
//			},
//		}
//
//		// use mockedStorage in code that requires send_message.Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// GetAllChatsFunc mocks the GetAllChats method.
	GetAllChatsFunc func() []int64

	// calls tracks calls to the methods.
	calls struct {
		// GetAllChats holds details about calls to the GetAllChats method.
		GetAllChats []struct {
		}
	}
	lockGetAllChats sync.RWMutex
}

// GetAllChats calls GetAllChatsFunc.
func (mock *StorageMock) GetAllChats() []int64 {
	if mock.GetAllChatsFunc == nil {
		panic("StorageMock.GetAllChatsFunc: method is nil but Storage.GetAllChats was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllChats.Lock()
	mock.calls.GetAllChats = append(mock.calls.GetAllChats, callInfo)
	mock.lockGetAllChats.Unlock()
	return mock.GetAllChatsFunc()
}

// GetAllChatsCalls gets all the calls that were made to GetAllChats.
// Check the length with:
//
//	len(mockedStorage.GetAllChatsCalls())
func (mock *StorageMock) GetAllChatsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllChats.RLock()
	calls = mock.calls.GetAllChats
	mock.lockGetAllChats.RUnlock()
	return calls
}

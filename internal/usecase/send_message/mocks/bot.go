// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// BotMock is a mock implementation of send_message.Bot.
//
//	func TestSomethingThatUsesBot(t *testing.T) {
//
//		// make and configure a mocked send_message.Bot
//		mockedBot := &BotMock{
//			SendMessageFunc: func(chatIDs []int64, message string)  {
//				panic("mock out the SendMessage method")
//			},
//		}
//
//		// use mockedBot in code that requires send_message.Bot
//		// and then make assertions.
//
//	}
type BotMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(chatIDs []int64, message string)

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// ChatIDs is the chatIDs argument value.
			ChatIDs []int64
			// Message is the message argument value.
			Message string
		}
	}
	lockSendMessage sync.RWMutex
}

// SendMessage calls SendMessageFunc.
func (mock *BotMock) SendMessage(chatIDs []int64, message string) {
	if mock.SendMessageFunc == nil {
		panic("BotMock.SendMessageFunc: method is nil but Bot.SendMessage was just called")
	}
	callInfo := struct {
		ChatIDs []int64
		Message string
	}{
		ChatIDs: chatIDs,
		Message: message,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	mock.SendMessageFunc(chatIDs, message)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//
//	len(mockedBot.SendMessageCalls())
func (mock *BotMock) SendMessageCalls() []struct {
	ChatIDs []int64
	Message string
} {
	var calls []struct {
		ChatIDs []int64
		Message string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
